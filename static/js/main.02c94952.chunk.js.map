{"version":3,"sources":["authConfig.js","components/SignInButton.jsx","components/SignOutButton.jsx","components/PageLayout.jsx","components/ProfileData.jsx","graph.js","App.jsx","index.js"],"names":["msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","graphConfig","SignInButton","instance","useMsal","handleLogin","loginType","loginPopup","catch","e","loginRedirect","DropdownButton","variant","className","drop","title","Dropdown","Item","as","onClick","SignOutButton","handleLogout","logoutType","logoutPopup","postLogoutRedirectUri","mainWindowRedirectUri","logoutRedirect","PageLayout","props","isAuthenticated","useIsAuthenticated","Navbar","bg","href","children","ProfileData","log","graphData","id","givenName","surname","userPrincipalName","callMsGraph","accessToken","a","headers","Headers","bearer","append","options","method","fetch","then","response","json","ProfileContent","accounts","useState","setGraphData","RequestProfileData","acquireTokenSilent","account","name","Button","MainContent","App","msalInstance","PublicClientApplication","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02c94952.chunk.js","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LogLevel } from \"@azure/msal-browser\";\n\n/**\n * Configuration object to be passed to MSAL instance on creation. \n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \n */\nexport const msalConfig = {\n    auth: {\n        clientId: \"bfcde4ee-93cd-4b39-89df-1295ec6d44bd\",\n        authority: \"https://login.microsoftonline.com/73c32d63-f0cc-4e50-90bc-f9d54290581e\",\n        redirectUri: \"https://finn1018.github.io/OAuth-test-app/\"\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n    },\n    system: {\t\n        loggerOptions: {\t\n            loggerCallback: (level, message, containsPii) => {\t\n                if (containsPii) {\t\t\n                    return;\t\t\n                }\t\t\n                switch (level) {\t\t\n                    case LogLevel.Error:\t\t\n                        console.error(message);\t\t\n                        return;\t\t\n                    case LogLevel.Info:\t\t\n                        console.info(message);\t\t\n                        return;\t\t\n                    case LogLevel.Verbose:\t\t\n                        console.debug(message);\t\t\n                        return;\t\t\n                    case LogLevel.Warning:\t\t\n                        console.warn(message);\t\t\n                        return;\t\t\n                }\t\n            }\t\n        }\t\n    }\n};\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit: \n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = {\n    scopes: [\"User.Read\"]\n};\n\n/**\n * Add here the scopes to request when obtaining an access token for MS Graph API. For more information, see:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\n */\nexport const graphConfig = {\n    graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\n};\n","import React from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { loginRequest } from \"../authConfig\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/esm/Dropdown\";\n\n/**\n * Renders a drop down button with child buttons for logging in with a popup or redirect\n */\nexport const SignInButton = () => {\n    const { instance } = useMsal();\n\n    const handleLogin = (loginType) => {\n        if (loginType === \"popup\") {\n            instance.loginPopup(loginRequest).catch(e => {\n                console.error(e);\n            });\n        } else if (loginType === \"redirect\") {\n            instance.loginRedirect(loginRequest).catch(e => {\n                console.error(e);\n            });\n        }\n    }\n    return (\n        <DropdownButton variant=\"secondary\" className=\"ml-auto\" drop=\"left\" title=\"Sign In\">\n            <Dropdown.Item as=\"button\" onClick={() => handleLogin(\"popup\")}>팝업으로 로그인하기</Dropdown.Item>\n            <Dropdown.Item as=\"button\" onClick={() => handleLogin(\"redirect\")}>리다이렉트로 로그인하기</Dropdown.Item>\n        </DropdownButton>\n    )\n}","import React from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/esm/Dropdown\";\n\n/**\n * Renders a sign-out button\n */\nexport const SignOutButton = () => {\n    const { instance } = useMsal();\n\n    const handleLogout = (logoutType) => {\n        if (logoutType === \"popup\") {\n            instance.logoutPopup({\n                postLogoutRedirectUri: \"/\",\n                mainWindowRedirectUri: \"/\"\n            });\n        } else if (logoutType === \"redirect\") {\n            instance.logoutRedirect({\n                postLogoutRedirectUri: \"/\",\n            });\n        }\n    }\n    return (\n        <DropdownButton variant=\"secondary\" className=\"ml-auto\" drop=\"left\" title=\"Sign Out\">\n            <Dropdown.Item as=\"button\" onClick={() => handleLogout(\"popup\")}>Sign out using Popup</Dropdown.Item>\n            <Dropdown.Item as=\"button\" onClick={() => handleLogout(\"redirect\")}>Sign out using Redirect</Dropdown.Item>\n        </DropdownButton>\n    )\n}","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nimport { useIsAuthenticated } from \"@azure/msal-react\";\nimport { SignInButton } from \"./SignInButton\";\nimport { SignOutButton } from \"./SignOutButton\";\n\n/**\n * Renders the navbar component with a sign-in or sign-out button depending on whether or not a user is authenticated\n * @param props \n */\nexport const PageLayout = (props) => {\n    const isAuthenticated = useIsAuthenticated();\n\n    return (\n        <>\n            <Navbar bg=\"primary\" variant=\"dark\">\n                <a className=\"navbar-brand\" href=\"/\">Microsoft Identity Platform</a>\n                { isAuthenticated ? <SignOutButton /> : <SignInButton /> }\n            </Navbar>\n            <h5><center></center></h5>\n            <br />\n            <br />\n            {props.children}\n        </>\n    );\n};\n","import React from \"react\";\n\n/**\n * Renders information about the user obtained from MS Graph\n * @param props \n */\nexport const ProfileData = (props) => {\n    console.log(props.graphData);\n\n    return (\n        <div id=\"profile-div\">\n            <p><strong>First Name: </strong> {props.graphData.givenName}</p>\n            <p><strong>Last Name: </strong> {props.graphData.surname}</p>\n            <p><strong>Email: </strong> {props.graphData.userPrincipalName}</p>\n            <p><strong>Id: </strong> {props.graphData.id}</p>\n        </div>\n    );\n};","import { graphConfig } from \"./authConfig\";\n\n/**\n * Attaches a given access token to a MS Graph API call. Returns information about the user\n * @param accessToken \n */\nexport async function callMsGraph(accessToken) {\n    const headers = new Headers();\n    const bearer = `Bearer ${accessToken}`;\n\n    headers.append(\"Authorization\", bearer);\n\n    const options = {\n        method: \"GET\",\n        headers: headers\n    };\n\n    return fetch(graphConfig.graphMeEndpoint, options)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n","import React, { useState } from \"react\";\nimport { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\nimport { loginRequest } from \"./authConfig\";\nimport { PageLayout } from \"./components/PageLayout\";\nimport { ProfileData } from \"./components/ProfileData\";\nimport { callMsGraph } from \"./graph\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./styles/App.css\";\n\n/**\n * Renders information about the signed-in user or a button to retrieve data about the user\n */\nconst ProfileContent = () => {\n    const { instance, accounts } = useMsal();\n    const [graphData, setGraphData] = useState(null);\n\n    function RequestProfileData() {\n        // Silently acquires an access token which is then attached to a request for MS Graph data\n        instance.acquireTokenSilent({\n            ...loginRequest,\n            account: accounts[0]\n        }).then((response) => {\n            callMsGraph(response.accessToken).then(response => setGraphData(response));\n        });\n    }\n\n    function RequestProfileData() {\n        instance.acquireTokenSilent({\n            ...loginRequest,\n            account: accounts[0]\n        }).then((response) => {\n            callMsGraph(response.accessToken).then(response => setGraphData(response));\n        });\n    }\n\n    return (\n        <>\n            <h5 className=\"card-title\">환영합니다. {accounts[0].name} 님!</h5>\n            {graphData ? \n                <ProfileData graphData={graphData} />\n                :\n                <Button onClick={RequestProfileData}>내 계정 정보 보기</Button>\n            }\n            <br/>\n            {graphData ? \n                <ProfileData graphData={graphData} />\n                :\n                <Button onClick={RequestProfileData}>내 회사 정보 보기</Button>\n            }\n        </>\n    );\n};\n\n/**\n * If a user is authenticated the ProfileContent component above is rendered. Otherwise a message indicating a user is not authenticated is rendered.\n */\nconst MainContent = () => {    \n    return (\n        <div className=\"App\">\n            <AuthenticatedTemplate>\n                <ProfileContent />\n            </AuthenticatedTemplate>\n\n            <UnauthenticatedTemplate>\n                <h5 className=\"card-title\">로그인을 완료하면 Microsoft 계정 정보를 볼 수 있습니다.</h5>\n            </UnauthenticatedTemplate>\n        </div>\n    );\n};\n\nexport default function App() {\n    return (\n        <PageLayout>\n            <MainContent />\n        </PageLayout>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.css\";\nimport App from \"./App.jsx\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { msalConfig } from \"./authConfig\";\n\n/**\n * Initialize a PublicClientApplication instance which is provided to the MsalProvider component\n * We recommend initializing this outside of your root component to ensure it is not re-initialized on re-renders\n */\nconst msalInstance = new PublicClientApplication(msalConfig);\n\n/**\n * We recommend wrapping most or all of your components in the MsalProvider component. It's best to render the MsalProvider as close to the root as possible.\n */\nReactDOM.render(\n    <React.StrictMode>\n        <MsalProvider instance={msalInstance}>\n            <App />\n        </MsalProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}